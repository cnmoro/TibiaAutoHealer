package breu.autohealer;

import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.MouseInfo;
import java.awt.Robot;
import java.util.Random;
import javax.swing.JOptionPane;
import java.awt.KeyEventDispatcher;
import java.awt.KeyboardFocusManager;
import java.awt.Window;
import java.awt.event.KeyEvent;

public class GUI extends javax.swing.JFrame {

    static int heal1Hotkey;
    static int heal2Hotkey;
    static int heal3Hotkey;

    static int hpHotkey;
    static int mpHotkey;

    static int ammoHotkey;
    static int ringHotkey;
    static int amuletHotkey;

    static int burnManaHotkey;

    static Coordinate heal1Bar;
    static Coordinate heal2Bar;
    static Coordinate heal3Bar;

    static Coordinate hpPotBar;
    static Coordinate mpPotBar;

    static Coordinate ammoPosition;
    static Coordinate ringPosition;
    static Coordinate amuletPosition;

    static Coordinate burnManaPosition;

    static Color heal1Color;
    static Color heal2Color;
    static Color heal3Color;

    static Color hpPotionColor;
    static Color mpPotionColor;

    static Color ammoColor;
    static Color ringColor;
    static Color amuletColor;

    static Color burnManaColor;

    static Robot robot;

    Component k;

    static boolean running = false;

    drawHpBarPosition drawHpPotionThread = new drawHpBarPosition();
    drawHpBarPosition drawH1Thread = new drawHpBarPosition();
    drawHpBarPosition drawH2Thread = new drawHpBarPosition();
    drawHpBarPosition drawH3Thread = new drawHpBarPosition();

    drawMpBarPosition drawMpPotionThread = new drawMpBarPosition();
    drawMpBarPosition drawManaBurnThread = new drawMpBarPosition();

    drawItemPosition drawRingThread = new drawItemPosition();
    drawItemPosition drawAmmoThread = new drawItemPosition();
    drawItemPosition drawAmuletThread = new drawItemPosition();

    public GUI() {
        try {
            robot = new Robot();

        } catch (Exception e) {
            JOptionPane.showMessageDialog(k, "Failed to initialize java robot.");
        }
        initComponents();
        setLocationRelativeTo(null);
        this.addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosing(java.awt.event.WindowEvent e) {
                System.exit(0);
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        startActions = new javax.swing.JButton();
        useHeal1 = new javax.swing.JCheckBox();
        useHeal2 = new javax.swing.JCheckBox();
        useHeal3 = new javax.swing.JCheckBox();
        useHpPotion = new javax.swing.JCheckBox();
        useMpPotion = new javax.swing.JCheckBox();
        stopActions = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        setPositionHeal1 = new javax.swing.JButton();
        setPositionHeal2 = new javax.swing.JButton();
        setPositionHeal3 = new javax.swing.JButton();
        setPositionHpPotion = new javax.swing.JButton();
        setPositionMpPotion = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        timeInterval = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        resetAll = new javax.swing.JButton();
        heal1BARCoordinate = new javax.swing.JLabel();
        heal2BARCoordinate = new javax.swing.JLabel();
        heal3BARCoordinate = new javax.swing.JLabel();
        hpBARCoordinate = new javax.swing.JLabel();
        mpBARCoordinate = new javax.swing.JLabel();
        statusLabel = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        useAmmo = new javax.swing.JCheckBox();
        useRing = new javax.swing.JCheckBox();
        useAmulet = new javax.swing.JCheckBox();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        setPositionAmmo = new javax.swing.JButton();
        setPositionRing = new javax.swing.JButton();
        setPositionAmulet = new javax.swing.JButton();
        ammoCoordinate = new javax.swing.JLabel();
        ringCoordinate = new javax.swing.JLabel();
        amuletCoordinate = new javax.swing.JLabel();
        useBurnMana = new javax.swing.JCheckBox();
        jLabel11 = new javax.swing.JLabel();
        setPositionBurnMana = new javax.swing.JButton();
        burnManaCoordinate = new javax.swing.JLabel();
        exitProgram = new javax.swing.JButton();
        selectHotkeyHeal1 = new javax.swing.JComboBox<>();
        selectHotkeyHeal2 = new javax.swing.JComboBox<>();
        selectHotkeyHeal3 = new javax.swing.JComboBox<>();
        selectHotkeyHp = new javax.swing.JComboBox<>();
        selectHotkeyMp = new javax.swing.JComboBox<>();
        selectHotkeyAmmo = new javax.swing.JComboBox<>();
        selectHotkeyRing = new javax.swing.JComboBox<>();
        selectHotkeyAmulet = new javax.swing.JComboBox<>();
        selectHotkeyBurnMana = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Tibia Auto Healer: Java Robot / Carlo Moro");
        setResizable(false);

        startActions.setBackground(new java.awt.Color(0, 153, 0));
        startActions.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        startActions.setForeground(new java.awt.Color(255, 255, 255));
        startActions.setText("Go");
        startActions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startActionsActionPerformed(evt);
            }
        });

        useHeal1.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        useHeal1.setText("Use Weak Heal");
        useHeal1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                useHeal1ActionPerformed(evt);
            }
        });

        useHeal2.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        useHeal2.setText("Use Medium Heal");
        useHeal2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                useHeal2ActionPerformed(evt);
            }
        });

        useHeal3.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        useHeal3.setText("Use Strong Heal");
        useHeal3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                useHeal3ActionPerformed(evt);
            }
        });

        useHpPotion.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        useHpPotion.setText("Use HP Potion");
        useHpPotion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                useHpPotionActionPerformed(evt);
            }
        });

        useMpPotion.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        useMpPotion.setText("Use MP Potion");
        useMpPotion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                useMpPotionActionPerformed(evt);
            }
        });

        stopActions.setBackground(new java.awt.Color(255, 0, 0));
        stopActions.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        stopActions.setForeground(new java.awt.Color(255, 255, 255));
        stopActions.setText("Stop");
        stopActions.setEnabled(false);
        stopActions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopActionsActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel1.setText("Hotkey:");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel2.setText("Hotkey:");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel3.setText("Hotkey:");

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel4.setText("Hotkey:");

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel5.setText("Hotkey:");

        setPositionHeal1.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        setPositionHeal1.setText("Set HP Bar Position");
        setPositionHeal1.setToolTipText("");
        setPositionHeal1.setEnabled(false);
        setPositionHeal1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setPositionHeal1ActionPerformed(evt);
            }
        });

        setPositionHeal2.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        setPositionHeal2.setText("Set HP Bar Position");
        setPositionHeal2.setEnabled(false);
        setPositionHeal2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setPositionHeal2ActionPerformed(evt);
            }
        });

        setPositionHeal3.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        setPositionHeal3.setText("Set HP Bar Position");
        setPositionHeal3.setEnabled(false);
        setPositionHeal3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setPositionHeal3ActionPerformed(evt);
            }
        });

        setPositionHpPotion.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        setPositionHpPotion.setText("Set HP Bar Position");
        setPositionHpPotion.setEnabled(false);
        setPositionHpPotion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setPositionHpPotionActionPerformed(evt);
            }
        });

        setPositionMpPotion.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        setPositionMpPotion.setText("Set MP Bar Position");
        setPositionMpPotion.setEnabled(false);
        setPositionMpPotion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setPositionMpPotionActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel6.setText("Check every");

        timeInterval.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        timeInterval.setText("1000");

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel7.setText("ms");
        jLabel7.setToolTipText("");

        resetAll.setBackground(new java.awt.Color(255, 153, 51));
        resetAll.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        resetAll.setForeground(new java.awt.Color(255, 255, 255));
        resetAll.setText("Reset All");
        resetAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetAllActionPerformed(evt);
            }
        });

        heal1BARCoordinate.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        heal1BARCoordinate.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        heal1BARCoordinate.setText("[x, y]");
        heal1BARCoordinate.setMaximumSize(new java.awt.Dimension(17, 13));

        heal2BARCoordinate.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        heal2BARCoordinate.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        heal2BARCoordinate.setText("[x, y]");
        heal2BARCoordinate.setMaximumSize(new java.awt.Dimension(17, 13));

        heal3BARCoordinate.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        heal3BARCoordinate.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        heal3BARCoordinate.setText("[x, y]");
        heal3BARCoordinate.setMaximumSize(new java.awt.Dimension(17, 13));

        hpBARCoordinate.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        hpBARCoordinate.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        hpBARCoordinate.setText("[x, y]");
        hpBARCoordinate.setMaximumSize(new java.awt.Dimension(17, 13));

        mpBARCoordinate.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        mpBARCoordinate.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        mpBARCoordinate.setText("[x, y]");
        mpBARCoordinate.setMaximumSize(new java.awt.Dimension(17, 13));

        statusLabel.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        statusLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        statusLabel.setText("Status: Stopped");

        useAmmo.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        useAmmo.setText("Refill Ammo");
        useAmmo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                useAmmoActionPerformed(evt);
            }
        });

        useRing.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        useRing.setText("Refill Ring");
        useRing.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                useRingActionPerformed(evt);
            }
        });

        useAmulet.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        useAmulet.setText("Refill Amulet");
        useAmulet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                useAmuletActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel8.setText("Hotkey:");

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel9.setText("Hotkey:");

        jLabel10.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel10.setText("Hotkey:");

        setPositionAmmo.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        setPositionAmmo.setText("Set Ammo Position");
        setPositionAmmo.setEnabled(false);
        setPositionAmmo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setPositionAmmoActionPerformed(evt);
            }
        });

        setPositionRing.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        setPositionRing.setText("Set Ring Position");
        setPositionRing.setEnabled(false);
        setPositionRing.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setPositionRingActionPerformed(evt);
            }
        });

        setPositionAmulet.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        setPositionAmulet.setText("Set Amulet Position");
        setPositionAmulet.setEnabled(false);
        setPositionAmulet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setPositionAmuletActionPerformed(evt);
            }
        });

        ammoCoordinate.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        ammoCoordinate.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        ammoCoordinate.setText("[x, y]");
        ammoCoordinate.setMaximumSize(new java.awt.Dimension(17, 13));

        ringCoordinate.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        ringCoordinate.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        ringCoordinate.setText("[x, y]");
        ringCoordinate.setMaximumSize(new java.awt.Dimension(17, 13));

        amuletCoordinate.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        amuletCoordinate.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        amuletCoordinate.setText("[x, y]");
        amuletCoordinate.setMaximumSize(new java.awt.Dimension(17, 13));

        useBurnMana.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        useBurnMana.setText("Burn Mana");
        useBurnMana.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                useBurnManaActionPerformed(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel11.setText("Hotkey:");

        setPositionBurnMana.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        setPositionBurnMana.setText("Set MP Bar Position");
        setPositionBurnMana.setEnabled(false);
        setPositionBurnMana.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setPositionBurnManaActionPerformed(evt);
            }
        });

        burnManaCoordinate.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        burnManaCoordinate.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        burnManaCoordinate.setText("[x, y]");
        burnManaCoordinate.setMaximumSize(new java.awt.Dimension(17, 13));

        exitProgram.setBackground(new java.awt.Color(0, 0, 0));
        exitProgram.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        exitProgram.setForeground(new java.awt.Color(255, 255, 255));
        exitProgram.setText("Exit");
        exitProgram.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitProgramActionPerformed(evt);
            }
        });

        selectHotkeyHeal1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "F1", "F2", "F3", "F4", "F5", "F6", "F7", "F8", "F9", "F10", "F11", "F12", "1", "2", "3", "4", "5", "6", "7", "8", "9", "0", "X", "R", "T", "Y", "U", "I", "O", "P", "F", "G", "H", "J", "K", "L", "V", "B", "N", "M" }));
        selectHotkeyHeal1.setEnabled(false);
        selectHotkeyHeal1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectHotkeyHeal1ActionPerformed(evt);
            }
        });

        selectHotkeyHeal2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "F1", "F2", "F3", "F4", "F5", "F6", "F7", "F8", "F9", "F10", "F11", "F12", "1", "2", "3", "4", "5", "6", "7", "8", "9", "0", "X", "R", "T", "Y", "U", "I", "O", "P", "F", "G", "H", "J", "K", "L", "V", "B", "N", "M" }));
        selectHotkeyHeal2.setEnabled(false);
        selectHotkeyHeal2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectHotkeyHeal2ActionPerformed(evt);
            }
        });

        selectHotkeyHeal3.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "F1", "F2", "F3", "F4", "F5", "F6", "F7", "F8", "F9", "F10", "F11", "F12", "1", "2", "3", "4", "5", "6", "7", "8", "9", "0", "X", "R", "T", "Y", "U", "I", "O", "P", "F", "G", "H", "J", "K", "L", "V", "B", "N", "M" }));
        selectHotkeyHeal3.setEnabled(false);
        selectHotkeyHeal3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectHotkeyHeal3ActionPerformed(evt);
            }
        });

        selectHotkeyHp.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "F1", "F2", "F3", "F4", "F5", "F6", "F7", "F8", "F9", "F10", "F11", "F12", "1", "2", "3", "4", "5", "6", "7", "8", "9", "0", "X", "R", "T", "Y", "U", "I", "O", "P", "F", "G", "H", "J", "K", "L", "V", "B", "N", "M" }));
        selectHotkeyHp.setEnabled(false);
        selectHotkeyHp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectHotkeyHpActionPerformed(evt);
            }
        });

        selectHotkeyMp.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "F1", "F2", "F3", "F4", "F5", "F6", "F7", "F8", "F9", "F10", "F11", "F12", "1", "2", "3", "4", "5", "6", "7", "8", "9", "0", "X", "R", "T", "Y", "U", "I", "O", "P", "F", "G", "H", "J", "K", "L", "V", "B", "N", "M" }));
        selectHotkeyMp.setEnabled(false);
        selectHotkeyMp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectHotkeyMpActionPerformed(evt);
            }
        });

        selectHotkeyAmmo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "F1", "F2", "F3", "F4", "F5", "F6", "F7", "F8", "F9", "F10", "F11", "F12", "1", "2", "3", "4", "5", "6", "7", "8", "9", "0", "X", "R", "T", "Y", "U", "I", "O", "P", "F", "G", "H", "J", "K", "L", "V", "B", "N", "M" }));
        selectHotkeyAmmo.setEnabled(false);
        selectHotkeyAmmo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectHotkeyAmmoActionPerformed(evt);
            }
        });

        selectHotkeyRing.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "F1", "F2", "F3", "F4", "F5", "F6", "F7", "F8", "F9", "F10", "F11", "F12", "1", "2", "3", "4", "5", "6", "7", "8", "9", "0", "X", "R", "T", "Y", "U", "I", "O", "P", "F", "G", "H", "J", "K", "L", "V", "B", "N", "M" }));
        selectHotkeyRing.setEnabled(false);
        selectHotkeyRing.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectHotkeyRingActionPerformed(evt);
            }
        });

        selectHotkeyAmulet.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "F1", "F2", "F3", "F4", "F5", "F6", "F7", "F8", "F9", "F10", "F11", "F12", "1", "2", "3", "4", "5", "6", "7", "8", "9", "0", "X", "R", "T", "Y", "U", "I", "O", "P", "F", "G", "H", "J", "K", "L", "V", "B", "N", "M" }));
        selectHotkeyAmulet.setEnabled(false);
        selectHotkeyAmulet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectHotkeyAmuletActionPerformed(evt);
            }
        });

        selectHotkeyBurnMana.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "F1", "F2", "F3", "F4", "F5", "F6", "F7", "F8", "F9", "F10", "F11", "F12", "1", "2", "3", "4", "5", "6", "7", "8", "9", "0", "X", "R", "T", "Y", "U", "I", "O", "P", "F", "G", "H", "J", "K", "L", "V", "B", "N", "M" }));
        selectHotkeyBurnMana.setEnabled(false);
        selectHotkeyBurnMana.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectHotkeyBurnManaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(useHeal1)
                            .addComponent(useHeal3)
                            .addComponent(useHpPotion)
                            .addComponent(useMpPotion)
                            .addComponent(useHeal2)
                            .addComponent(useAmmo)
                            .addComponent(useRing)
                            .addComponent(useAmulet)
                            .addComponent(useBurnMana))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5)
                            .addComponent(jLabel8)
                            .addComponent(jLabel9)
                            .addComponent(jLabel10)
                            .addComponent(jLabel11)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(selectHotkeyHeal2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(selectHotkeyHeal1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(selectHotkeyHeal3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(selectHotkeyHp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(selectHotkeyMp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(selectHotkeyAmmo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(selectHotkeyRing, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(selectHotkeyAmulet, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(selectHotkeyBurnMana, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(17, 17, 17)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(setPositionBurnMana, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(burnManaCoordinate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(setPositionHeal1, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(heal1BARCoordinate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(setPositionHeal2, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(heal2BARCoordinate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(setPositionHeal3, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(heal3BARCoordinate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(setPositionHpPotion, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(hpBARCoordinate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(setPositionMpPotion, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(mpBARCoordinate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(setPositionAmmo, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ammoCoordinate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(setPositionAmulet, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(amuletCoordinate, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(setPositionRing, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ringCoordinate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(timeInterval, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(statusLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(exitProgram)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(resetAll)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(stopActions)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(startActions)
                        .addGap(10, 10, 10))))
            .addComponent(jSeparator1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(useHeal1)
                    .addComponent(jLabel1)
                    .addComponent(setPositionHeal1)
                    .addComponent(heal1BARCoordinate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(selectHotkeyHeal1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(useHeal2)
                    .addComponent(jLabel2)
                    .addComponent(setPositionHeal2)
                    .addComponent(heal2BARCoordinate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(selectHotkeyHeal2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(useHeal3)
                    .addComponent(jLabel3)
                    .addComponent(setPositionHeal3)
                    .addComponent(heal3BARCoordinate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(selectHotkeyHeal3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(useHpPotion)
                    .addComponent(jLabel4)
                    .addComponent(setPositionHpPotion)
                    .addComponent(hpBARCoordinate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(selectHotkeyHp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(useMpPotion)
                    .addComponent(jLabel5)
                    .addComponent(setPositionMpPotion)
                    .addComponent(mpBARCoordinate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(selectHotkeyMp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(useAmmo)
                    .addComponent(jLabel8)
                    .addComponent(setPositionAmmo)
                    .addComponent(ammoCoordinate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(selectHotkeyAmmo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(useRing)
                    .addComponent(jLabel9)
                    .addComponent(setPositionRing)
                    .addComponent(ringCoordinate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(selectHotkeyRing, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(useAmulet)
                    .addComponent(jLabel10)
                    .addComponent(setPositionAmulet)
                    .addComponent(amuletCoordinate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(selectHotkeyAmulet, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(useBurnMana)
                    .addComponent(jLabel11)
                    .addComponent(setPositionBurnMana)
                    .addComponent(burnManaCoordinate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(selectHotkeyBurnMana, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7)
                    .addComponent(timeInterval, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(resetAll)
                    .addComponent(stopActions)
                    .addComponent(startActions)
                    .addComponent(statusLabel)
                    .addComponent(exitProgram))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void useHeal1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_useHeal1ActionPerformed
        if (useHeal1.isSelected()) {
            if (!heal1BARCoordinate.getText().equalsIgnoreCase("[x, y]")) {
                setPositionHeal1.setEnabled(true);
            }
            selectHotkeyHeal1.setEnabled(true);
            this.drawH1Thread.run();
        } else {
            selectHotkeyHeal1.setEnabled(false);
            setPositionHeal1.setEnabled(false);
            this.drawH1Thread.clear();
        }
    }//GEN-LAST:event_useHeal1ActionPerformed

    private void setPositionHeal1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setPositionHeal1ActionPerformed
        JOptionPane.showMessageDialog(k, "Move mouse on top of hp bar position to use weak healing spell and press enter.");

        this.drawH1Thread.clear();

        heal1Bar = new Coordinate(MouseInfo.getPointerInfo().getLocation().x, MouseInfo.getPointerInfo().getLocation().y);
        heal1BARCoordinate.setText("[" + heal1Bar.getX() + ", " + heal1Bar.getY() + "]");

        JOptionPane.showMessageDialog(k, "Move mouse away and press enter.");
        heal1Color = robot.getPixelColor(heal1Bar.getX(), heal1Bar.getY());

        this.drawH1Thread = new drawHpBarPosition();
        this.drawH1Thread.setCoordinate(heal1Bar);
        this.drawH1Thread.setLabel("H-");
        this.drawH1Thread.start();
    }//GEN-LAST:event_setPositionHeal1ActionPerformed

    private void setPositionHeal2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setPositionHeal2ActionPerformed
        JOptionPane.showMessageDialog(k, "Move mouse on top of hp bar position to use medium healing spell and press enter.");

        this.drawH2Thread.clear();

        heal2Bar = new Coordinate(MouseInfo.getPointerInfo().getLocation().x, MouseInfo.getPointerInfo().getLocation().y);
        heal2BARCoordinate.setText("[" + heal2Bar.getX() + ", " + heal2Bar.getY() + "]");

        JOptionPane.showMessageDialog(k, "Move mouse away and press enter.");
        heal2Color = robot.getPixelColor(heal2Bar.getX(), heal2Bar.getY());

        this.drawH2Thread = new drawHpBarPosition();
        this.drawH2Thread.setCoordinate(heal2Bar);
        this.drawH2Thread.setLabel("H");
        this.drawH2Thread.start();
    }//GEN-LAST:event_setPositionHeal2ActionPerformed

    private void setPositionHeal3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setPositionHeal3ActionPerformed
        JOptionPane.showMessageDialog(k, "Move mouse on top of hp bar position to use strong healing spell and press enter.");

        this.drawH3Thread.clear();

        heal3Bar = new Coordinate(MouseInfo.getPointerInfo().getLocation().x, MouseInfo.getPointerInfo().getLocation().y);
        heal3BARCoordinate.setText("[" + heal3Bar.getX() + ", " + heal3Bar.getY() + "]");

        JOptionPane.showMessageDialog(k, "Move mouse away and press enter.");
        heal3Color = robot.getPixelColor(heal3Bar.getX(), heal3Bar.getY());

        this.drawH3Thread = new drawHpBarPosition();
        this.drawH3Thread.setCoordinate(heal3Bar);
        this.drawH3Thread.setLabel("H+");
        this.drawH3Thread.start();
    }//GEN-LAST:event_setPositionHeal3ActionPerformed

    private void setPositionHpPotionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setPositionHpPotionActionPerformed
        JOptionPane.showMessageDialog(k, "Move mouse on top of hp bar position to use healing potion and press enter.");

        this.drawHpPotionThread.clear();

        hpPotBar = new Coordinate(MouseInfo.getPointerInfo().getLocation().x, MouseInfo.getPointerInfo().getLocation().y);
        hpBARCoordinate.setText("[" + hpPotBar.getX() + ", " + hpPotBar.getY() + "]");

        JOptionPane.showMessageDialog(k, "Move mouse away and press enter.");
        hpPotionColor = robot.getPixelColor(hpPotBar.getX(), hpPotBar.getY());

        this.drawHpPotionThread = new drawHpBarPosition();
        this.drawHpPotionThread.setCoordinate(hpPotBar);
        this.drawHpPotionThread.setLabel("Pot");
        this.drawHpPotionThread.start();
    }//GEN-LAST:event_setPositionHpPotionActionPerformed

    private void setPositionMpPotionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setPositionMpPotionActionPerformed
        JOptionPane.showMessageDialog(k, "Move mouse on top of mp bar position to use mana potion and press enter.");

        this.drawMpPotionThread.clear();

        mpPotBar = new Coordinate(MouseInfo.getPointerInfo().getLocation().x, MouseInfo.getPointerInfo().getLocation().y);
        mpBARCoordinate.setText("[" + mpPotBar.getX() + ", " + mpPotBar.getY() + "]");

        JOptionPane.showMessageDialog(k, "Move mouse away and press enter.");
        mpPotionColor = robot.getPixelColor(mpPotBar.getX(), mpPotBar.getY());

        this.drawMpPotionThread = new drawMpBarPosition();
        this.drawMpPotionThread.setCoordinate(mpPotBar);
        this.drawMpPotionThread.setLabel("Pot");
        this.drawMpPotionThread.start();
    }//GEN-LAST:event_setPositionMpPotionActionPerformed

    private void useHeal2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_useHeal2ActionPerformed
        if (useHeal2.isSelected()) {
            if (!heal2BARCoordinate.getText().equalsIgnoreCase("[x, y]")) {
                setPositionHeal2.setEnabled(true);
            }
            selectHotkeyHeal2.setEnabled(true);
            this.drawH2Thread.run();
        } else {
            selectHotkeyHeal2.setEnabled(false);
            setPositionHeal2.setEnabled(false);
            this.drawH2Thread.clear();
        }
    }//GEN-LAST:event_useHeal2ActionPerformed

    private void useHeal3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_useHeal3ActionPerformed
        if (useHeal3.isSelected()) {
            if (!heal3BARCoordinate.getText().equalsIgnoreCase("[x, y]")) {
                setPositionHeal3.setEnabled(true);
            }
            selectHotkeyHeal3.setEnabled(true);
            this.drawH3Thread.run();
        } else {
            selectHotkeyHeal3.setEnabled(false);
            setPositionHeal3.setEnabled(false);
            this.drawH3Thread.clear();
        }
    }//GEN-LAST:event_useHeal3ActionPerformed

    private void useHpPotionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_useHpPotionActionPerformed
        if (useHpPotion.isSelected()) {
            if (!hpBARCoordinate.getText().equalsIgnoreCase("[x, y]")) {
                setPositionHpPotion.setEnabled(true);
            }
            selectHotkeyHp.setEnabled(true);
            this.drawHpPotionThread.run();
        } else {
            selectHotkeyHp.setEnabled(false);
            setPositionHpPotion.setEnabled(false);
            this.drawHpPotionThread.clear();
        }
    }//GEN-LAST:event_useHpPotionActionPerformed

    private void useMpPotionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_useMpPotionActionPerformed
        if (useMpPotion.isSelected()) {
            if (!mpBARCoordinate.getText().equalsIgnoreCase("[x, y]")) {
                setPositionMpPotion.setEnabled(true);
            }
            selectHotkeyMp.setEnabled(true);
            this.drawMpPotionThread.run();
        } else {
            selectHotkeyMp.setEnabled(false);
            setPositionMpPotion.setEnabled(false);
            this.drawMpPotionThread.clear();
        }
    }//GEN-LAST:event_useMpPotionActionPerformed

    private void resetAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetAllActionPerformed
        resetAll();
    }//GEN-LAST:event_resetAllActionPerformed

    private void stopActionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopActionsActionPerformed
        stopRunning();
    }//GEN-LAST:event_stopActionsActionPerformed

    private void startActionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startActionsActionPerformed
        startRunning();
    }//GEN-LAST:event_startActionsActionPerformed

    private void setPositionAmmoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setPositionAmmoActionPerformed
        JOptionPane.showMessageDialog(k, "Move mouse on top of empty ammo position to refill and press enter.");

        this.drawAmmoThread.clear();

        ammoPosition = new Coordinate(MouseInfo.getPointerInfo().getLocation().x, MouseInfo.getPointerInfo().getLocation().y);
        ammoCoordinate.setText("[" + ammoPosition.getX() + ", " + ammoPosition.getY() + "]");

        JOptionPane.showMessageDialog(k, "Move mouse away and press enter.");
        ammoColor = robot.getPixelColor(ammoPosition.getX(), ammoPosition.getY());

        this.drawAmmoThread = new drawItemPosition();
        this.drawAmmoThread.setCoordinate(ammoPosition);
        this.drawAmmoThread.setLabel("Ammo");
        this.drawAmmoThread.start();
    }//GEN-LAST:event_setPositionAmmoActionPerformed

    private void setPositionRingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setPositionRingActionPerformed
        JOptionPane.showMessageDialog(k, "Move mouse on top of empty ring position to refill and press enter.");

        this.drawRingThread.clear();

        ringPosition = new Coordinate(MouseInfo.getPointerInfo().getLocation().x, MouseInfo.getPointerInfo().getLocation().y);
        ringCoordinate.setText("[" + ringPosition.getX() + ", " + ringPosition.getY() + "]");

        JOptionPane.showMessageDialog(k, "Move mouse away and press enter.");
        ringColor = robot.getPixelColor(ringPosition.getX(), ringPosition.getY());

        this.drawRingThread = new drawItemPosition();
        this.drawRingThread.setCoordinate(ringPosition);
        this.drawRingThread.setLabel("Ring");
        this.drawRingThread.start();
    }//GEN-LAST:event_setPositionRingActionPerformed

    private void setPositionAmuletActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setPositionAmuletActionPerformed
        JOptionPane.showMessageDialog(k, "Move mouse on top of empty amulet position to refill and press enter.");

        this.drawAmuletThread.clear();

        amuletPosition = new Coordinate(MouseInfo.getPointerInfo().getLocation().x, MouseInfo.getPointerInfo().getLocation().y);
        amuletCoordinate.setText("[" + amuletPosition.getX() + ", " + amuletPosition.getY() + "]");

        JOptionPane.showMessageDialog(k, "Move mouse away and press enter.");
        amuletColor = robot.getPixelColor(amuletPosition.getX(), amuletPosition.getY());

        this.drawAmuletThread = new drawItemPosition();
        this.drawAmuletThread.setCoordinate(amuletPosition);
        this.drawAmuletThread.setLabel("Amulet");
        this.drawAmuletThread.start();
    }//GEN-LAST:event_setPositionAmuletActionPerformed

    private void useAmmoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_useAmmoActionPerformed
        if (useAmmo.isSelected()) {
            if (!ammoCoordinate.getText().equalsIgnoreCase("[x, y]")) {
                setPositionAmmo.setEnabled(true);
            }
            selectHotkeyAmmo.setEnabled(true);
            this.drawAmmoThread.run();
        } else {
            selectHotkeyAmmo.setEnabled(false);
            setPositionAmmo.setEnabled(false);
            this.drawAmmoThread.clear();
        }
    }//GEN-LAST:event_useAmmoActionPerformed

    private void useRingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_useRingActionPerformed
        if (useRing.isSelected()) {
            if (!ringCoordinate.getText().equalsIgnoreCase("[x, y]")) {
                setPositionRing.setEnabled(true);
            }
            selectHotkeyRing.setEnabled(true);
            this.drawRingThread.run();
        } else {
            selectHotkeyRing.setEnabled(false);
            setPositionRing.setEnabled(false);
            this.drawRingThread.clear();
        }
    }//GEN-LAST:event_useRingActionPerformed

    private void useAmuletActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_useAmuletActionPerformed
        if (useAmulet.isSelected()) {
            if (!amuletCoordinate.getText().equalsIgnoreCase("[x, y]")) {
                setPositionAmulet.setEnabled(true);
            }
            selectHotkeyAmulet.setEnabled(true);
            this.drawAmuletThread.run();
        } else {
            selectHotkeyAmulet.setEnabled(false);
            setPositionAmulet.setEnabled(false);
            this.drawAmuletThread.clear();
        }
    }//GEN-LAST:event_useAmuletActionPerformed

    private void useBurnManaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_useBurnManaActionPerformed
        if (useBurnMana.isSelected()) {
            if (!burnManaCoordinate.getText().equalsIgnoreCase("[x, y]")) {
                setPositionBurnMana.setEnabled(true);
            }
            selectHotkeyBurnMana.setEnabled(true);
            this.drawManaBurnThread.run();
        } else {
            selectHotkeyBurnMana.setEnabled(false);
            setPositionBurnMana.setEnabled(false);
            this.drawManaBurnThread.clear();
        }
    }//GEN-LAST:event_useBurnManaActionPerformed

    private void setPositionBurnManaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setPositionBurnManaActionPerformed
        JOptionPane.showMessageDialog(k, "Move mouse on top of mp bar position (spot should have mana) to use mana burn spell and press enter.");

        this.drawManaBurnThread.clear();

        burnManaPosition = new Coordinate(MouseInfo.getPointerInfo().getLocation().x, MouseInfo.getPointerInfo().getLocation().y);
        burnManaCoordinate.setText("[" + burnManaPosition.getX() + ", " + burnManaPosition.getY() + "]");

        JOptionPane.showMessageDialog(k, "Move mouse away and press enter.");
        burnManaColor = robot.getPixelColor(burnManaPosition.getX(), burnManaPosition.getY());

        this.drawManaBurnThread = new drawMpBarPosition();
        this.drawManaBurnThread.setCoordinate(burnManaPosition);
        this.drawManaBurnThread.setLabel("Burn");
        this.drawManaBurnThread.start();
    }//GEN-LAST:event_setPositionBurnManaActionPerformed

    private void exitProgramActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitProgramActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitProgramActionPerformed

    private void selectHotkeyHeal1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectHotkeyHeal1ActionPerformed
        this.heal1Hotkey = getHotkeyCode((String) selectHotkeyHeal1.getSelectedItem());
        this.setPositionHeal1.setEnabled(true);
    }//GEN-LAST:event_selectHotkeyHeal1ActionPerformed

    private void selectHotkeyHeal2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectHotkeyHeal2ActionPerformed
        this.heal2Hotkey = getHotkeyCode((String) selectHotkeyHeal2.getSelectedItem());
        this.setPositionHeal2.setEnabled(true);
    }//GEN-LAST:event_selectHotkeyHeal2ActionPerformed

    private void selectHotkeyHeal3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectHotkeyHeal3ActionPerformed
        this.heal3Hotkey = getHotkeyCode((String) selectHotkeyHeal3.getSelectedItem());
        this.setPositionHeal3.setEnabled(true);
    }//GEN-LAST:event_selectHotkeyHeal3ActionPerformed

    private void selectHotkeyHpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectHotkeyHpActionPerformed
        this.hpHotkey = getHotkeyCode((String) selectHotkeyHp.getSelectedItem());
        this.setPositionHpPotion.setEnabled(true);
    }//GEN-LAST:event_selectHotkeyHpActionPerformed

    private void selectHotkeyMpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectHotkeyMpActionPerformed
        this.mpHotkey = getHotkeyCode((String) selectHotkeyMp.getSelectedItem());
        this.setPositionMpPotion.setEnabled(true);
    }//GEN-LAST:event_selectHotkeyMpActionPerformed

    private void selectHotkeyAmmoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectHotkeyAmmoActionPerformed
        this.ammoHotkey = getHotkeyCode((String) selectHotkeyAmmo.getSelectedItem());
        this.setPositionAmmo.setEnabled(true);
    }//GEN-LAST:event_selectHotkeyAmmoActionPerformed

    private void selectHotkeyRingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectHotkeyRingActionPerformed
        this.ringHotkey = getHotkeyCode((String) selectHotkeyRing.getSelectedItem());
        this.setPositionRing.setEnabled(true);
    }//GEN-LAST:event_selectHotkeyRingActionPerformed

    private void selectHotkeyAmuletActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectHotkeyAmuletActionPerformed
        this.amuletHotkey = getHotkeyCode((String) selectHotkeyAmulet.getSelectedItem());
        this.setPositionAmulet.setEnabled(true);
    }//GEN-LAST:event_selectHotkeyAmuletActionPerformed

    private void selectHotkeyBurnManaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectHotkeyBurnManaActionPerformed
        this.burnManaHotkey = getHotkeyCode((String) selectHotkeyBurnMana.getSelectedItem());
        this.setPositionBurnMana.setEnabled(true);
    }//GEN-LAST:event_selectHotkeyBurnManaActionPerformed

    public static void main(String args[]) {
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI().setVisible(true);
            }
        });
    }

    public void startRunning() {
        running = true;
        stopActions.setEnabled(true);
        startActions.setEnabled(false);
        statusLabel.setText("Status: Running");

        new healerThread().start();
        new keyboardInspectorThread().start();
    }

    public static void stopRunning() {
        running = false;
        stopActions.setEnabled(false);
        startActions.setEnabled(true);
        statusLabel.setText("Status: Stopped");
    }

    static class keyboardInspectorThread extends Thread {

        private static volatile boolean pausePressed = false;

        public keyboardInspectorThread() {
        }

        public boolean isPausePressed() {
            synchronized (keyboardInspectorThread.class) {
                return pausePressed;
            }
        }

        public void run() {
            KeyboardFocusManager.getCurrentKeyboardFocusManager().addKeyEventDispatcher(new KeyEventDispatcher() {

                @Override
                public boolean dispatchKeyEvent(KeyEvent ke) {
                    synchronized (keyboardInspectorThread.class) {
                        switch (ke.getID()) {
                            case KeyEvent.KEY_PRESSED:
                                if (ke.getKeyCode() == KeyEvent.VK_PAUSE) {
                                    pausePressed = true;
                                    stopRunning();
                                }
                                break;
                        }
                        return false;
                    }
                }
            });
        }
    }

    static class healerThread extends Thread {

        int minMs = 27;
        int maxMs = 54;

        int minimumInterval = 281;
        int maximumInterval = 406;

        public healerThread() {
        }

        public int getRandomMilisecondsInRange(int min, int max) {
            return (min + new Random().nextInt(max - min + 1));
        }

        public void actuate(int keyCode) {
            robot.delay(getRandomMilisecondsInRange(minMs, maxMs));
            robot.keyPress(keyCode);
            robot.keyRelease(keyCode);
        }

        public void run() {
            while (running) {
                try {
                    boolean isLowPriority1 = true;
                    boolean isLowPriority2 = true;
                    boolean isLowPriority3 = true;

                    if (useHpPotion.isSelected() && hpPotBar != null && hpPotionColor != null) {
                        if (robot.getPixelColor(hpPotBar.getX(), hpPotBar.getY()).getRGB() != hpPotionColor.getRGB()) {
                            actuate(hpHotkey);
                            isLowPriority1 = false;
                            isLowPriority2 = false;
                            isLowPriority3 = false;

                            Thread.sleep(getRandomMilisecondsInRange(minimumInterval, maximumInterval));
                        }
                    }

                    if (isLowPriority1) {
                        if (useMpPotion.isSelected() && mpPotBar != null && mpPotionColor != null) {
                            if (robot.getPixelColor(mpPotBar.getX(), mpPotBar.getY()).getRGB() != mpPotionColor.getRGB()) {
                                actuate(mpHotkey);

                                Thread.sleep(getRandomMilisecondsInRange(minimumInterval, maximumInterval));
                            }
                        }
                    }

                    if (isLowPriority1) {
                        if (useHeal3.isSelected() && heal3Bar != null && heal3Color != null) {
                            if (robot.getPixelColor(heal3Bar.getX(), heal3Bar.getY()).getRGB() != heal3Color.getRGB()) {
                                actuate(heal3Hotkey);
                                isLowPriority2 = false;
                                isLowPriority3 = false;

                                Thread.sleep(getRandomMilisecondsInRange(minimumInterval, maximumInterval));
                            }
                        }
                    }

                    if (isLowPriority2) {
                        if (useHeal2.isSelected() && heal2Bar != null && heal2Color != null) {
                            if (robot.getPixelColor(heal2Bar.getX(), heal2Bar.getY()).getRGB() != heal2Color.getRGB()) {
                                actuate(heal2Hotkey);
                                isLowPriority3 = false;

                                Thread.sleep(getRandomMilisecondsInRange(minimumInterval, maximumInterval));
                            }
                        }
                    }

                    if (isLowPriority3) {
                        if (useHeal1.isSelected() && heal1Bar != null && heal1Color != null) {
                            if (robot.getPixelColor(heal1Bar.getX(), heal1Bar.getY()).getRGB() != heal1Color.getRGB()) {
                                actuate(heal1Hotkey);

                                Thread.sleep(getRandomMilisecondsInRange(minimumInterval, maximumInterval));
                            }
                        }
                    }

                    if (isLowPriority1) {
                        if (useAmmo.isSelected() && ammoPosition != null && ammoColor != null) {
                            if (robot.getPixelColor(ammoPosition.getX(), ammoPosition.getY()).getRGB() == ammoColor.getRGB()) {
                                actuate(ammoHotkey);

                                Thread.sleep(getRandomMilisecondsInRange(minimumInterval, maximumInterval));
                            }
                        }
                    }

                    if (isLowPriority1) {
                        if (useRing.isSelected() && ringPosition != null && ringColor != null) {
                            if (robot.getPixelColor(ringPosition.getX(), ringPosition.getY()).getRGB() == ringColor.getRGB()) {
                                actuate(ringHotkey);

                                Thread.sleep(getRandomMilisecondsInRange(minimumInterval, maximumInterval));
                            }
                        }
                    }

                    if (isLowPriority1) {
                        if (useAmulet.isSelected() && amuletPosition != null && amuletColor != null) {
                            if (robot.getPixelColor(amuletPosition.getX(), amuletPosition.getY()).getRGB() == amuletColor.getRGB()) {
                                actuate(amuletHotkey);

                                Thread.sleep(getRandomMilisecondsInRange(minimumInterval, maximumInterval));
                            }
                        }
                    }

                    if (isLowPriority1) {
                        if (useBurnMana.isSelected() && burnManaPosition != null && burnManaColor != null) {
                            if (robot.getPixelColor(burnManaPosition.getX(), burnManaPosition.getY()).getRGB() == burnManaColor.getRGB()) {
                                actuate(burnManaHotkey);

                                Thread.sleep(getRandomMilisecondsInRange(minimumInterval, maximumInterval));
                            }
                        }
                    }

                    Thread.sleep(Integer.parseInt(timeInterval.getText()));
                } catch (InterruptedException ex) {
                    Thread.currentThread().interrupt();
                }
            }
        }
    }

    static class drawHpBarPosition extends Thread {

        Coordinate c;
        String label;
        Window w;

        public drawHpBarPosition() {
        }

        public void setCoordinate(Coordinate c) {
            this.c = c;
        }

        public void setLabel(String label) {
            this.label = label;
        }

        public void run() {
            if (c != null && !label.equalsIgnoreCase("")) {
                w = new Window(null) {
                    public void paint(Graphics g) {
                        int x = c.getX();
                        int y = c.getY();
                        final Font font = getFont().deriveFont(10f);
                        g.setFont(font);
                        g.setColor(Color.YELLOW);
                        g.drawRect(x - 2, y - 5, 4, 11);

                        final String message = label;
                        g.drawString(message, x - 5, y - 9);
                    }

                    @Override
                    public void update(Graphics g) {
                        paint(g);
                    }
                };

                w.setAlwaysOnTop(true);
                w.setBounds(w.getGraphicsConfiguration().getBounds());
                w.setBackground(new Color(0, true));
                w.setVisible(true);
            }
        }

        public void clear() {
            if (this.w != null) {
                this.w.dispose();
            }
        }
    }

    static class drawMpBarPosition extends Thread {

        Coordinate c;
        String label;
        Window w;

        public drawMpBarPosition() {
        }

        public void setCoordinate(Coordinate c) {
            this.c = c;
        }

        public void setLabel(String label) {
            this.label = label;
        }

        public void run() {
            if (c != null && !label.equalsIgnoreCase("")) {
                w = new Window(null) {
                    public void paint(Graphics g) {
                        int x = c.getX();
                        int y = c.getY();
                        final Font font = getFont().deriveFont(10f);
                        g.setFont(font);
                        g.setColor(Color.YELLOW);
                        g.drawRect(x - 2, y - 5, 4, 11);

                        final String message = label;
                        g.drawString(message, x - 5, y + 17);
                    }

                    @Override
                    public void update(Graphics g) {
                        paint(g);
                    }
                };

                w.setAlwaysOnTop(true);
                w.setBounds(w.getGraphicsConfiguration().getBounds());
                w.setBackground(new Color(0, true));
                w.setVisible(true);
            }
        }

        public void clear() {
            if (this.w != null) {
                this.w.dispose();
            }
        }
    }

    static class drawItemPosition extends Thread {

        Coordinate c;
        String label;
        Window w;

        public drawItemPosition() {
        }

        public void setCoordinate(Coordinate c) {
            this.c = c;
        }

        public void setLabel(String label) {
            this.label = label;
        }

        public void run() {
            if (c != null && !label.equalsIgnoreCase("")) {
                w = new Window(null) {
                    public void paint(Graphics g) {
                        int x = c.getX();
                        int y = c.getY();
                        final Font font = getFont().deriveFont(10f);
                        g.setFont(font);
                        g.setColor(Color.YELLOW);
                        g.drawArc(x - 5, y - 5, 10, 10, 0, 360);

                        final String message = label;
                        g.drawString(message, x - 9, y - 9);
                    }

                    @Override
                    public void update(Graphics g) {
                        paint(g);
                    }
                };

                w.setAlwaysOnTop(true);
                w.setBounds(w.getGraphicsConfiguration().getBounds());
                w.setBackground(new Color(0, true));
                w.setVisible(true);
            }
        }

        public void clear() {
            if (this.w != null) {
                this.w.dispose();
            }
        }
    }

    public void resetAll() {
        stopRunning();

        heal1Bar = new Coordinate();
        heal2Bar = new Coordinate();
        heal3Bar = new Coordinate();

        hpPotBar = new Coordinate();
        mpPotBar = new Coordinate();

        ammoPosition = new Coordinate();
        ringPosition = new Coordinate();
        amuletPosition = new Coordinate();

        heal1BARCoordinate.setText("[x, y]");
        heal2BARCoordinate.setText("[x, y]");
        heal3BARCoordinate.setText("[x, y]");

        hpBARCoordinate.setText("[x, y]");
        mpBARCoordinate.setText("[x, y]");

        ammoCoordinate.setText("[x, y]");
        ringCoordinate.setText("[x, y]");
        amuletCoordinate.setText("[x, y]");

        burnManaCoordinate.setText("[x, y]");

        timeInterval.setText("1000");

        useHeal1.setSelected(false);
        useHeal2.setSelected(false);
        useHeal3.setSelected(false);

        useHpPotion.setSelected(false);
        useMpPotion.setSelected(false);

        useAmmo.setSelected(false);
        useRing.setSelected(false);
        useAmulet.setSelected(false);

        useBurnMana.setSelected(false);

        setPositionHeal1.setEnabled(false);
        setPositionHeal2.setEnabled(false);
        setPositionHeal3.setEnabled(false);

        setPositionHpPotion.setEnabled(false);
        setPositionMpPotion.setEnabled(false);

        setPositionAmmo.setEnabled(false);
        setPositionRing.setEnabled(false);
        setPositionAmulet.setEnabled(false);

        setPositionBurnMana.setEnabled(false);

        drawHpPotionThread.clear();
        drawH1Thread.clear();
        drawH2Thread.clear();
        drawH3Thread.clear();

        drawMpPotionThread.clear();
        drawMpPotionThread.clear();

        drawRingThread.clear();
        drawAmmoThread.clear();
        drawAmuletThread.clear();

        drawManaBurnThread.clear();

        drawHpPotionThread = new drawHpBarPosition();
        drawH1Thread = new drawHpBarPosition();
        drawH2Thread = new drawHpBarPosition();
        drawH3Thread = new drawHpBarPosition();

        drawMpPotionThread = new drawMpBarPosition();
        drawManaBurnThread = new drawMpBarPosition();

        drawRingThread = new drawItemPosition();
        drawAmmoThread = new drawItemPosition();
        drawAmuletThread = new drawItemPosition();

        stopActions.setEnabled(false);
        startActions.setEnabled(true);
    }

    public int getHotkeyCode(String strKey) {
        if (strKey.equalsIgnoreCase("F1")) {
            return KeyEvent.VK_F1;
        }

        if (strKey.equalsIgnoreCase("F2")) {
            return KeyEvent.VK_F2;
        }

        if (strKey.equalsIgnoreCase("F3")) {
            return KeyEvent.VK_F3;
        }

        if (strKey.equalsIgnoreCase("F4")) {
            return KeyEvent.VK_F4;
        }

        if (strKey.equalsIgnoreCase("F5")) {
            return KeyEvent.VK_F5;
        }

        if (strKey.equalsIgnoreCase("F6")) {
            return KeyEvent.VK_F6;
        }

        if (strKey.equalsIgnoreCase("F7")) {
            return KeyEvent.VK_F7;
        }

        if (strKey.equalsIgnoreCase("F8")) {
            return KeyEvent.VK_F8;
        }

        if (strKey.equalsIgnoreCase("F9")) {
            return KeyEvent.VK_F9;
        }

        if (strKey.equalsIgnoreCase("F10")) {
            return KeyEvent.VK_F10;
        }

        if (strKey.equalsIgnoreCase("F11")) {
            return KeyEvent.VK_F11;
        }

        if (strKey.equalsIgnoreCase("F12")) {
            return KeyEvent.VK_F12;
        }

        if (strKey.equalsIgnoreCase("1")) {
            return KeyEvent.VK_1;
        }

        if (strKey.equalsIgnoreCase("2")) {
            return KeyEvent.VK_2;
        }

        if (strKey.equalsIgnoreCase("3")) {
            return KeyEvent.VK_3;
        }

        if (strKey.equalsIgnoreCase("4")) {
            return KeyEvent.VK_4;
        }

        if (strKey.equalsIgnoreCase("5")) {
            return KeyEvent.VK_5;
        }

        if (strKey.equalsIgnoreCase("6")) {
            return KeyEvent.VK_6;
        }

        if (strKey.equalsIgnoreCase("7")) {
            return KeyEvent.VK_7;
        }

        if (strKey.equalsIgnoreCase("8")) {
            return KeyEvent.VK_8;
        }

        if (strKey.equalsIgnoreCase("9")) {
            return KeyEvent.VK_9;
        }

        if (strKey.equalsIgnoreCase("0")) {
            return KeyEvent.VK_0;
        }

        if (strKey.equalsIgnoreCase("X")) {
            return KeyEvent.VK_X;
        }

        if (strKey.equalsIgnoreCase("R")) {
            return KeyEvent.VK_R;
        }

        if (strKey.equalsIgnoreCase("T")) {
            return KeyEvent.VK_T;
        }

        if (strKey.equalsIgnoreCase("Y")) {
            return KeyEvent.VK_Y;
        }

        if (strKey.equalsIgnoreCase("U")) {
            return KeyEvent.VK_U;
        }

        if (strKey.equalsIgnoreCase("I")) {
            return KeyEvent.VK_I;
        }

        if (strKey.equalsIgnoreCase("O")) {
            return KeyEvent.VK_O;
        }

        if (strKey.equalsIgnoreCase("P")) {
            return KeyEvent.VK_P;
        }

        if (strKey.equalsIgnoreCase("F")) {
            return KeyEvent.VK_F;
        }

        if (strKey.equalsIgnoreCase("G")) {
            return KeyEvent.VK_G;
        }

        if (strKey.equalsIgnoreCase("H")) {
            return KeyEvent.VK_H;
        }

        if (strKey.equalsIgnoreCase("J")) {
            return KeyEvent.VK_J;
        }

        if (strKey.equalsIgnoreCase("K")) {
            return KeyEvent.VK_K;
        }

        if (strKey.equalsIgnoreCase("L")) {
            return KeyEvent.VK_L;
        }

        if (strKey.equalsIgnoreCase("V")) {
            return KeyEvent.VK_V;
        }

        if (strKey.equalsIgnoreCase("B")) {
            return KeyEvent.VK_B;
        }

        if (strKey.equalsIgnoreCase("N")) {
            return KeyEvent.VK_N;
        }

        if (strKey.equalsIgnoreCase("M")) {
            return KeyEvent.VK_M;
        }

        return -1;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel ammoCoordinate;
    private javax.swing.JLabel amuletCoordinate;
    private javax.swing.JLabel burnManaCoordinate;
    public static javax.swing.JButton exitProgram;
    private javax.swing.JLabel heal1BARCoordinate;
    private javax.swing.JLabel heal2BARCoordinate;
    private javax.swing.JLabel heal3BARCoordinate;
    private javax.swing.JLabel hpBARCoordinate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel mpBARCoordinate;
    private javax.swing.JButton resetAll;
    private javax.swing.JLabel ringCoordinate;
    public static javax.swing.JComboBox<String> selectHotkeyAmmo;
    public static javax.swing.JComboBox<String> selectHotkeyAmulet;
    public static javax.swing.JComboBox<String> selectHotkeyBurnMana;
    public static javax.swing.JComboBox<String> selectHotkeyHeal1;
    public static javax.swing.JComboBox<String> selectHotkeyHeal2;
    public static javax.swing.JComboBox<String> selectHotkeyHeal3;
    public static javax.swing.JComboBox<String> selectHotkeyHp;
    public static javax.swing.JComboBox<String> selectHotkeyMp;
    public static javax.swing.JComboBox<String> selectHotkeyRing;
    private javax.swing.JButton setPositionAmmo;
    private javax.swing.JButton setPositionAmulet;
    private javax.swing.JButton setPositionBurnMana;
    private javax.swing.JButton setPositionHeal1;
    private javax.swing.JButton setPositionHeal2;
    private javax.swing.JButton setPositionHeal3;
    private javax.swing.JButton setPositionHpPotion;
    private javax.swing.JButton setPositionMpPotion;
    private javax.swing.JButton setPositionRing;
    public static javax.swing.JButton startActions;
    public static javax.swing.JLabel statusLabel;
    public static javax.swing.JButton stopActions;
    public static javax.swing.JTextField timeInterval;
    public static javax.swing.JCheckBox useAmmo;
    public static javax.swing.JCheckBox useAmulet;
    public static javax.swing.JCheckBox useBurnMana;
    public static javax.swing.JCheckBox useHeal1;
    public static javax.swing.JCheckBox useHeal2;
    public static javax.swing.JCheckBox useHeal3;
    public static javax.swing.JCheckBox useHpPotion;
    public static javax.swing.JCheckBox useMpPotion;
    public static javax.swing.JCheckBox useRing;
    // End of variables declaration//GEN-END:variables
}
